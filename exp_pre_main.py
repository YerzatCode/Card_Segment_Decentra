import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import dask.dataframe as dd
# --- 1. –°–±–æ—Ä –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
# üîπ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –¢–∞–±–ª–∏—Ü–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏

# –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
file_path = 'data/raw/transactions.parquet' # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

# --- –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ---

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (pandas) ---
try:
    df_transactions = dd.read_parquet(file_path).compute()
    print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df_transactions.shape[0]} —Å—Ç—Ä–æ–∫, {df_transactions.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤.")
except FileNotFoundError:
    print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
    print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É 'transactions.parquet'.")
    exit()
except Exception as e:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
    exit()

print("\n--- –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ---")
print(df_transactions.head())

print("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö: ---")
df_transactions.info()

# --- –û—á–∏—Å—Ç–∫–∞ –æ—Ç –ø—É—Å—Ç—ã—Ö/–∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–∞—á–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø) –∏ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö ---

# –ö–æ–ª–æ–Ω–∫–∏, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ [cite: 33, 34]
# transaction_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (UUID) - –æ–±—ã—á–Ω–æ object/string
# transaction_timestamp: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (YYYY-MM-DD HH:MM:SS) - datetime
# card_id: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã - int or object (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã/—Å—É—Ñ—Ñ–∏–∫—Å—ã)
# expiry_date: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ MM/YY - object/string, –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ datetime
# issuer_bank_name: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞-—ç–º–∏—Ç–µ–Ω—Ç–∞ –∫–∞—Ä—Ç—ã - object/string
# merchant_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - object/string (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
# merchant_mcc: –ö–æ–¥ MCC (Merchant Category Code) - int or object (–ª—É—á—à–µ category)
# merchant_city: –ì–æ—Ä–æ–¥ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ - object/string (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
# transaction_type: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ - object/string (–ª—É—á—à–µ category)
# transaction_amount_kzt: –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–µ–Ω–≥–µ (KZT) - float/int
# original_amount: –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –≤–∞–ª—é—Ç–µ –ø–ª–∞—Ç–µ–∂–∞ - float (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
# transaction_currency: –ö–æ–¥ –≤–∞–ª—é—Ç—ã –ø–ª–∞—Ç–µ–∂–∞ (ISO-Alpha-3) - object/string (–ª—É—á—à–µ category)
# acquirer_country_iso: –ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã-—ç–∫–≤–∞–π–µ—Ä–∞ (ISO-Alpha-3) - object/string (–ª—É—á—à–µ category)
# pos_entry_mode: –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –Ω–∞ POS-—Ç–µ—Ä–º–∏–Ω–∞–ª–µ - object/string (–ª—É—á—à–µ category)
# wallet_type: –¢–∏–ø —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ - object/string (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ª—É—á—à–µ category)

# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
print("\n--- –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö: ---")

# –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
if 'transaction_timestamp' in df_transactions.columns:
    df_transactions['transaction_timestamp'] = pd.to_datetime(df_transactions['transaction_timestamp'])
    print("'transaction_timestamp' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ datetime.")

# –ß–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã –¥–ª—è —Å—É–º–º
if 'transaction_amount_kzt' in df_transactions.columns:
    df_transactions['transaction_amount_kzt'] = pd.to_numeric(df_transactions['transaction_amount_kzt'], errors='coerce')
    print("'transaction_amount_kzt' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø.")
if 'original_amount' in df_transactions.columns:
    df_transactions['original_amount'] = pd.to_numeric(df_transactions['original_amount'], errors='coerce')
    print("'original_amount' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø.")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è 'merchant_mcc':
# –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–ø–∞ "Unknown",
# —É–¥–æ–±–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—ë –∫–∞–∫ —Å—Ç—Ä–æ–∫—É (str), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
if 'merchant_mcc' in df_transactions.columns:
    df_transactions['merchant_mcc'] = df_transactions['merchant_mcc'].astype(str)
    print("'merchant_mcc' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø (str).")

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã (–ø—Ä–∏–º–µ—Ä—ã)
categorical_cols = ['transaction_type', 'transaction_currency',
                    'acquirer_country_iso', 'pos_entry_mode', 'wallet_type', 'issuer_bank_name', 'merchant_city']
for col in categorical_cols:
    if col in df_transactions.columns:
        df_transactions[col] = df_transactions[col].astype('category')
        print(f"'{col}' –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ card_id - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—á–∏—Ç–∞–Ω –∫–∞–∫ object
if 'card_id' in df_transactions.columns:
     # –ï—Å–ª–∏ card_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞, –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å object –∏–ª–∏ string
     # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ–≤–æ–π ID, –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å:
     # df_transactions['card_id'] = pd.to_numeric(df_transactions['card_id'], errors='raise') # –∏–ª–∏ 'coerce'
    print(f"–¢–∏–ø 'card_id' –æ—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ {df_transactions['card_id'].dtype} (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–∏–º –¥–∞–Ω–Ω—ã–º).")


# --- –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏ --- [cite: 2]
if 'transaction_amount_kzt' in df_transactions.columns:
    initial_rows = df_transactions.shape[0]
    df_transactions = df_transactions[df_transactions['transaction_amount_kzt'] > 0]
    rows_after_cleaning = df_transactions.shape[0]
    print(f"\n–£–¥–∞–ª–µ–Ω–æ {initial_rows - rows_after_cleaning} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º–æ–π.")
    print(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—É–º–º: {rows_after_cleaning} —Å—Ç—Ä–æ–∫.")
else:
    print("\n–ö–æ–ª–æ–Ω–∫–∞ 'transaction_amount_kzt' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) ---
# –í –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ (merchant_id, merchant_city, original_amount, wallet_type) [cite: 33, 34]
print("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ---")
for column in df_transactions.columns:
    if df_transactions[column].isnull().any():
        null_count = df_transactions[column].isnull().sum()
        print(f"–ö–æ–ª–æ–Ω–∫–∞ '{column}' —Å–æ–¥–µ—Ä–∂–∏—Ç {null_count} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({null_count / len(df_transactions):.2%}).")
        # –ü—Ä–∏–º–µ—Ä: –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–æ–¥–æ–π –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'Unknown'
        if df_transactions[column].dtype.name == 'category':
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 'Unknown'
            # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 'Unknown' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
            if 'Unknown' not in df_transactions[column].cat.categories:
                 df_transactions[column] = df_transactions[column].cat.add_categories('Unknown')
            df_transactions[column] = df_transactions[column].fillna('Unknown')
            print(f"–ü—Ä–æ–ø—É—Å–∫–∏ –≤ '{column}' –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 'Unknown'.")
        # –ü—Ä–∏–º–µ—Ä: –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π –∏–ª–∏ –Ω—É–ª–µ–º, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–ª—è
        elif pd.api.types.is_numeric_dtype(df_transactions[column]):
            # –î–ª—è 'original_amount' –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –≤ KZT, –∑–∞–ø–æ–ª–Ω–∏–º 0 –∏–ª–∏ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
            if column == 'original_amount':
                 df_transactions[column] = df_transactions[column].fillna(0) # –∏–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ/—Å—Ç—Ä–∞—Ç–µ–≥–∏—è
                 print(f"–ü—Ä–æ–ø—É—Å–∫–∏ –≤ '{column}' (—á–∏—Å–ª–æ–≤–æ–π) –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ 0.")
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –Ω—É–∂–Ω–∞ —Å–≤–æ—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏, –∏—Ö –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å (–º–µ–¥–∏–∞–Ω–∞, —Å—Ä–µ–¥–Ω–µ–µ –∏ —Ç.–¥.)

# –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
print("\n--- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ---")
print(df_transactions.isnull().sum())

print("\n--- –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ---")
print(df_transactions.head())

print("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ---")
df_transactions.info()

print("\n--- –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ---")
# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º describe
numeric_cols_processed = df_transactions.select_dtypes(include=np.number).columns
if not numeric_cols_processed.empty:
    print(df_transactions[numeric_cols_processed].describe())
else:
    print("–ß–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ - "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ card_id ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞" [cite: 2]
# –≠—Ç–æ—Ç —à–∞–≥ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—á–∞–ª–æ–º Feature Engineering –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–∞–ª–µ–µ.
# –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ—á–∏—â–µ–Ω—ã –∏ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ –Ω—É–∂–Ω—ã–º —Ç–∏–ø–∞–º.

print("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è Feature Engineering. ---")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ DataFrame (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# processed_file_path = 'data/processed/transactions_processed.parquet'
# df_transactions.to_parquet(processed_file_path)
# print(f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {processed_file_path}")

print("\n--- –≠—Ç–∞–ø 2: Feature Engineering ---")

# –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ card_id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
# –ó–∞–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—è–º
agg_functions = {
    'transaction_id': 'count',  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    'transaction_amount_kzt': ['sum', 'mean', 'median', 'std', 'min', 'max'],  # —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—É–º–º–∞–º
    'merchant_id': pd.Series.nunique,  # —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫
    'merchant_mcc': pd.Series.nunique,   # —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π MCC
    'transaction_timestamp': ['min', 'max']  # –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
}

df_features = df_transactions.groupby('card_id').agg(agg_functions)

# –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏–º–µ—é—Ç –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —É–ø—Ä–æ—â–∞–µ–º –∏—Ö:
df_features.columns = ['_'.join(col).strip() for col in df_features.columns.values]

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
# 1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π (–æ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π)
df_features['active_days'] = (df_features['transaction_timestamp_max'] - df_features['transaction_timestamp_min']).dt.days + 1
# 2. –°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –¥–µ–Ω—å
df_features['transactions_per_day'] = df_features['transaction_id_count'] / df_features['active_days']

# –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è:
df_features.rename(columns={
    'transaction_id_count': 'total_transactions',
    'transaction_amount_kzt_sum': 'total_amount_kzt',
    'transaction_amount_kzt_mean': 'mean_amount_kzt',
    'transaction_amount_kzt_median': 'median_amount_kzt',
    'transaction_amount_kzt_std': 'std_amount_kzt',
    'transaction_amount_kzt_min': 'min_amount_kzt',
    'transaction_amount_kzt_max': 'max_amount_kzt',
    'merchant_id_nunique': 'unique_merchants',
    'merchant_mcc_nunique': 'unique_mcc',
    'transaction_timestamp_min': 'first_transaction',
    'transaction_timestamp_max': 'last_transaction'
}, inplace=True)

print("\n--- –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ): ---")
print(df_features.head())

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# - –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
# - –í—ã—è–≤–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –∏–ª–∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
#
# –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –¥–ª—è –º–æ–¥–µ–ª–∏,
# –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–∑–Ω–∞–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫ (–∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ merchant_mcc).

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# processed_features_path = 'data/processed/client_features.parquet'
# df_features.to_parquet(processed_features_path)
# print(f"\n–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {processed_features_path}")

# –ü–æ—Å—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
plt.figure(figsize=(10, 6))
plt.hist(df_features['total_transactions'], bins=50, color='skyblue', edgecolor='black')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º')
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤)')
plt.grid(axis='y', alpha=0.75)
plt.show()

# –ü–æ—Å—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT)
plt.figure(figsize=(10, 6))
plt.hist(df_features['total_amount_kzt'], bins=50, color='salmon', edgecolor='black')
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT)')
plt.xlabel('–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT)')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤)')
plt.grid(axis='y', alpha=0.75)
plt.show()

# –ü–æ—Å—Ç—Ä–æ–∏–º —Ç–æ—á–µ—á–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
plt.figure(figsize=(10, 6))
plt.scatter(df_features['total_transactions'], df_features['total_amount_kzt'], color='green', alpha=0.6)
plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
plt.xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
plt.ylabel('–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT)')
plt.grid(True)
plt.show()


# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
plt.figure(figsize=(10, 6))
log_total_transactions = np.log1p(df_features['total_transactions'])
plt.hist(log_total_transactions, bins=50, color='skyblue', edgecolor='black')
plt.title('–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π')
plt.xlabel('log(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π + 1)')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (—á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤)')
plt.grid(axis='y', alpha=0.75)
plt.show()

# –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
plt.figure(figsize=(10, 6))
log_total_amount = np.log1p(df_features['total_amount_kzt'])
plt.hist(log_total_amount, bins=50, color='salmon', edgecolor='black')
plt.title('–õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT)')
plt.xlabel('log(–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π + 1)')
plt.ylabel('–ß–∞—Å—Ç–æ—Ç–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤)')
plt.grid(axis='y', alpha=0.75)
plt.show()

# –¢–æ—á–µ—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–±—â–µ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º
plt.figure(figsize=(10, 6))
plt.scatter(np.log1p(df_features['total_transactions']),
            np.log1p(df_features['total_amount_kzt']),
            color='green', alpha=0.6)
plt.title('–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å log(–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π) –æ—Ç log(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)')
plt.xlabel('log(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π + 1)')
plt.ylabel('log(–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (KZT) + 1)')
plt.grid(True)
plt.show()

# –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
output_path_features = 'data/processed/client_features.csv'
output_path_transactions = 'data/processed/transactions_processed.csv'

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ)
df_features.to_csv(output_path_features, index=True)
print(f"–î–∞–Ω–Ω—ã–µ –ø–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path_features}")

# –¢–∞–∫–∂–µ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø–µ 1:
df_transactions.to_csv(output_path_transactions, index=False)
print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path_transactions}")

# –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞)
output_path_features = 'data/processed/client_features.parquet'
output_path_transactions = 'data/processed/transactions_processed.parquet'

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ)
df_features.to_parquet(output_path_features, index=True)
print(f"–î–∞–Ω–Ω—ã–µ –ø–æ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path_features}")

# –¢–∞–∫–∂–µ, –µ—Å–ª–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω–∞ —ç—Ç–∞–ø–µ 1:
df_transactions.to_parquet(output_path_transactions, index=False)
print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path_transactions}")